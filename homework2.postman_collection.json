{
	"info": {
		"_postman_id": "0c40221b-d922-41ea-9900-5a94fba1a280",
		"name": "homework2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20090302"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"   pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"//или\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});  "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							" //Спарсить response body в json (забрать данные из ответа)\r",
							" let jsonData = pm.response.json();\r",
							" let resp_name =jsonData.name;\r",
							" let resp_age= jsonData.age;\r",
							" let resp_salary = String(jsonData.salary);\r",
							"\r",
							" //4. Проверить, что name в ответе равно name в request (name вбить руками.)\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Yulia\");});\r",
							"\r",
							"   //5. Проверить, что age в ответе равно age в request (age вбить руками.)\r",
							"   pm.test(\"check age\", function () {\r",
							"    pm.expect(resp_age).to.eql('27');})\r",
							"\r",
							" //6. Проверить, что salary в ответе равно salary в request (salary вбить руками.)\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql('500');})\r",
							"\r",
							"//7. Спарсить request. (забрать данные из запроса)\r",
							"let req = request.data;\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"let req_salary_1_5 = req.salary*4;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"check_name_req\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name); })\r",
							"\r",
							" // 9. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"pm.test(\"check_age_req\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age); })\r",
							"\r",
							"// 10.  Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"    pm.test(\"check_salary_req\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"    })\r",
							"\r",
							" // 11. Вывести в консоль параметр family из response.\r",
							"let par_fam = jsonData.family\r",
							"console.log(\"параметр family ==\" , par_fam);\r",
							"\r",
							"// 12.Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let resp_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
							"pm.test(\"check_sal1.5_req\", function () {\r",
							"    pm.expect(resp_salary_1_5_year).to.eql(req_salary_1_5);\r",
							"     })"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Yulia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3?=&=",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": ""
						},
						{
							"key": "",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							" let jsonData = pm.response.json();\r",
							"\r",
							" let resp_name =jsonData.name;\r",
							" let resp_age= jsonData.age;\r",
							" let resp_salary= String(jsonData.salary);\r",
							"\r",
							"//Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							" pm.test(\"check_name_req\", function () {\r",
							"    pm.expect(resp_name).to.eql(req.name); })\r",
							"\r",
							"//6. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.\r",
							"pm.test(\"check_salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"let par_family = jsonData.family \r",
							"console.log(\"family ===\" , par_family )\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"let resp_dog =jsonData.family.pets.dog\r",
							"pm.test(\"check_dog_par_name\", function () {\r",
							"    pm.expect(resp_dog).to.have.property(\"name\");}); // property-значение в ключе\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"check_dog_par_age\", function () {\r",
							"    pm.expect(resp_dog).to.have.property(\"age\");});\r",
							"\r",
							"//  11. Проверить, что параметр name имеет значение Luky.\r",
							"  pm.test(\"check_dog_name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"check_dog_age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Yulia&age=27&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Yulia"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							" let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name =req.name;\r",
							"let req_age =req.age;\r",
							"let req_salary =req.salary;\r",
							"// 5. Проверить, что name в ответе равно name из request (name забрать из request.)\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(String(jsonData.age)).to.eql(req_age);});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"    console.log(\"salary--\" , req_salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"salary response-->\" , jsonData.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"salary_responce_0 ==)\", jsonData.salary[0] )\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"salary_responce_1 ==)\", jsonData.salary[1] )\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"salary_responce_2 ==)\", jsonData.salary[2] )\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary0\", function () {\r",
							"    pm.expect(String(jsonData.salary[0])).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let salary_1 = String(req.salary*2);\r",
							"pm.test(\"salary1\", function () {\r",
							"    pm.expect(jsonData.salary[1]).to.eql(salary_1);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let salary_2 = String(req.salary*3);\r",
							"pm.test(\"salary2\", function () {\r",
							"    pm.expect(jsonData.salary[2]).to.eql(salary_2);\r",
							"});\r",
							"\r",
							"//  Создать в окружении переменную name, age, salary\r",
							"//  Передать в окружение переменную name, age, salary\r",
							"pm.environment.set(\"name\", req_name);\r",
							"pm.environment.set(\"age\", req_age);\r",
							"pm.environment.set(\"salary\", req_salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из \r",
							"//параметра  salary.\r",
							"for (let i= 0; i<jsonData.salary.length; i++){\r",
							"    console.log(\"salary--\" ,jsonData.salary[i])\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Yulia&age=27&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Yulia"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							" let jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"let req_salary_6_m= req.salary*2;\r",
							"let req_salary_12_m = req.salary*2.7;\r",
							"let req_salary_1_5_y =req.salary *3.3;\r",
							"let req_salary_3_5_y= req.salary*3.8;\r",
							"let req_salary_5y= req.salary*4.2;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"start_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"salary_6m\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");});\r",
							"\r",
							" // 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"salary_12m\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"salary_1.5y\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"salary_3.5y\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");});\r",
							"\r",
							" // 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");});\r",
							"\r",
							" // 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(String(jsonData.start_qa_salary)).to.eql(req_salary);\r",
							"});\r",
							" // 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary_6month\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req_salary_6_m);});\r",
							"\r",
							" // 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							" pm.test(\"salary12_months\", function () {\r",
							"     pm.expect(jsonData.qa_salary_after_12_months).to.eql(req_salary_12_m);});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request //(salary забрать из request.)\r",
							"pm.test(\"salary1_5_year\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(req_salary_1_5_y);});\r",
							"\r",
							" // 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 request (salary забрать из request.)\r",
							"pm.test(\"salary3.5_year\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(req_salary_3_5_y);\r",
							"});\r",
							" // 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary1\", function () {\r",
							"    pm.expect(String(jsonData.person.u_name[1])).to.eql(req_salary);\r",
							"});\r",
							" // 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"check_age1\", function () {\r",
							"    pm.expect(String(jsonData.person.u_age)).to.eql(req_age);\r",
							"});\r",
							" // 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"salary_5_years\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req_salary_5y);\r",
							"});\r",
							" // 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							" for (let i in jsonData.person){\r",
							"     console.log(jsonData.person[i])\r",
							" }\r",
							"for (let i=0; i<=2; i++){\r",
							"    if (i==0){\r",
							"        console.log(\"u_age--\" ,jsonData.person.u_age)\r",
							"    } else if (i==1){\r",
							"        console.log(\"u_name--\" , jsonData.person.u_name)\r",
							"    } else if (i==2)(console.log(\"u_salary_5_years--\" ,jsonData.person.u_salary_5_years))\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}